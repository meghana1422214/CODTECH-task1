# Project ToDo List Documentation

## Introduction
- **Purpose** : To-do lists offer a way to increase productivity, stopping you from forgetting things, helps prioritise tasks, manage tasks effectively, use time wisely and improve time management as well as workflow


## File Structure
- Overview of file structure : This Repository contains 3 files(HTML, CSS, JS ) and 1 Image used as background


# HTML File Documentation: Todo List

## Introduction
This HTML file serves as the user interface for a simple To-Do List application. It includes the necessary structure and elements to manage and display tasks that users can add and interact with.

## File Overview
- **Filename**: index.html
- **Purpose**: Provides the structure and layout for the To-Do List application interface.
- **Dependencies**: 
  - **styles.css**: Defines the visual style and layout of the To-Do List.
  - **script.js**: Implements the functionality to add tasks and manage the To-Do List.

## HTML Structure
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Todo List</title>
    <link href="styles.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h2>.........To Do List.......</h2>
        <br><i class="quote">(HAPPINESS IS   finishing your to-do-list) </i>
        <input type="text" id="newToDoInput" placeholder="Enter Your To-Do">
        <button id="addTodoBtn">Add</button>
        <ul id="todoList"></ul>
    </div>
    <script src="script.js"></script>
</body>
</html>

Detailed Description
HTML Elements and Attributes
<meta charset="UTF-8">, <meta name="viewport" content="width=device-width, initial-scale=1.0">

Ensures proper character encoding and sets the viewport for responsive design.
<title>Todo List</title>

Sets the title of the web page displayed in the browser tab.
<link href="styles.css" rel="stylesheet">

Links the external CSS file (styles.css) for styling the To-Do List interface.
Main Content Structure
.container

Div that wraps all content for styling and layout purposes.
<h2>.........To Do List.......</h2>

Heading displaying the title of the To-Do List.
<i class="quote">(HAPPINESS IS finishing your to-do-list) </i>

Italicized quote providing a motivational message related to completing tasks.
<input type="text" id="newToDoInput" placeholder="Enter Your To-Do">

Text input field where users can enter new tasks to add to the To-Do List.
<button id="addTodoBtn">Add</button>

Button that triggers the addition of a new task to the To-Do List when clicked.
<ul id="todoList"></ul>

Unordered list element (<ul>) where the added tasks will be dynamically listed as list items (<li>).
Script Inclusion
<script src="script.js"></script>
Links the external JavaScript file (script.js) that provides the interactive functionality for adding tasks to the To-Do List.
Usage
Adding Tasks
Enter a task in the text input field labeled "Enter Your To-Do".
Click the "Add" button to add the task to the list below.
Viewing Tasks
Added tasks will appear as list items in the <ul id="todoList"> element.
Notes
Ensure that both styles.css and script.js files are present and correctly linked for proper functioning of the To-Do List application.
Conclusion
This HTML file forms the foundation of the To-Do List application, providing the structure and interface elements necessary for users to manage and view their tasks. It integrates with external CSS and JavaScript files to handle styling and functionality, respectively.

vbnet
Copy code

To use this documentation on GitHub:

1. Copy the Markdown content above into a new file named `README.md` in the root directory of your GitHub repository.
2. Save the file.
3. Commit and push the changes to your GitHub repository.

Once uploaded, visitors to your GitHub repository will be able to view this documenta

# CSS File Documentation: styles.css

## Introduction
This CSS file (`styles.css`) provides the styling for a To-Do List web application. It defines the visual appearance and layout of the user interface elements, enhancing usability and aesthetic appeal.

## File Overview
- **Filename**: styles.css
- **Purpose**: Defines the styles for HTML elements in the To-Do List application interface.

## CSS Styles Overview

### Body Styles
```css
body {
    font-family: Arial, Helvetica, sans-serif;
    background-color: #f2f2f2;
    background: url(image.avif); /* Replace with your actual image path */
    background-position: center;
    background-size: cover;
}
Sets the overall font family, background color, and background image for the entire document.
Container Styles
css
Copy code
.container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
    background: transparent;
    backdrop-filter: blur(20px);
    border-radius: 5px;
    border: 2px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 0 20px 2px rgba(0, 0, 0, 0.3);
}
Defines the styling for the main container that holds the To-Do List interface. Includes maximum width, margin, padding, background transparency with blur effect, border radius, border, and box shadow.
Heading Styles
css
Copy code
h2 {
    margin-top: 0;
    text-align: center;
    color: #0f0f0f;
    text-decoration: dashed;
    text-shadow: #080808;
}

.quote {
    margin-top: 0;
    text-align: center;
    color: #ecd3d3;
    text-decoration: dashed;
    text-shadow: #080808;
}
Defines styles for the main heading (<h2>) and quote (<i class="quote">) elements in the To-Do List interface.
Input and Button Styles
css
Copy code
input[type="text"] {
    padding: 8px;
    font-size: 16px;
    border: 1px solid #f2f2f2;
    border-radius: 2px solid #ccc;
    width: 80%;
    margin-right: 10px;
}

button {
    padding: 8px;
    background-color: #3a3232;
    color: #fff;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #080808;
}
Styles for the text input field (<input type="text">) and button (<button>) used in the To-Do List interface.
List Item Styles
css
Copy code
ul {
    list-style: none;
    padding: 0;
    margin-top: 20px;
}

li {
    padding: 10px;
    background-color: #eee;
    margin-bottom: 5px;
    border-radius: 5px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

li:last-child {
    margin-bottom: 0px;
}
Styles for the unordered list (<ul>) and list item (<li>) elements in the To-Do List, including padding, background color, margin, border radius, and flexbox alignment.
Delete Button Styles
css
Copy code
.delete-todo-btn {
    background-color: red;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 3px;
    cursor: pointer;
}

.delete-todo-btn:hover {
    background-color: rgb(128, 16, 16);
}
Styles for the delete button (<button class="delete-todo-btn">) used within each To-Do List item, defining its background color, text color, padding, border radius, and hover effect.
Usage
This CSS file (styles.css) is crucial for maintaining the visual consistency and user experience of the To-Do List application. Ensure it is properly linked to your HTML (index.html) file for correct styling and functionality.

Conclusion
This CSS documentation outlines the styles applied to various elements in the To-Do List application, enhancing its usability and visual appeal. Adjustments can be made based on specific design preferences or additional features implemented in your project.

markdown
Copy code

### Instructions for GitHub:

1. Copy the Markdown content above into a new file named `README.md` in the root directory of your GitHub repository where your project files (`index.html`, `styles.css`, `script.js`) are located.
   
2. Save the `README.md` file.

3. Commit and push the changes to your GitHub repository.

This Markdown file will provide clear documentation for users and contributors visiting


# JavaScript File Documentation: script.js

## Introduction
This JavaScript file (`script.js`) provides the interactive functionality for a To-Do List web application. It handles the addition of new tasks and allows users to delete tasks dynamically.

## File Overview
- **Filename**: script.js
- **Purpose**: Implements the client-side scripting logic for adding and deleting tasks in the To-Do List interface.

## JavaScript Functionality Overview

### Event Listeners
```javascript
const todoList = document.getElementById("todoList");
const newTodoInput = document.getElementById("newToDoInput");
const addTodoBtn = document.getElementById("addTodoBtn");

addTodoBtn.addEventListener("click", () => {
    // Logic to add new task when "Add" button is clicked
});
Retrieves references to HTML elements (todoList, newToDoInput, addTodoBtn) using document.getElementById() for interaction.
Adding Tasks
javascript
Copy code
addTodoBtn.addEventListener("click", () => {
    const newTodoText = newTodoInput.value;

    if (newTodoText !== "") {
        const newTodoItem = document.createElement("li");
        newTodoItem.innerText = newTodoText;

        const deleteTodoBtn = document.createElement("button");
        deleteTodoBtn.innerText = "X";
        deleteTodoBtn.classList.add("delete-todo-btn");

        deleteTodoBtn.addEventListener("click", function () {
            newTodoItem.remove();
        });

        newTodoItem.appendChild(deleteTodoBtn);
        todoList.appendChild(newTodoItem);

        newTodoInput.value = "";
    }
});
Functionality: When the "Add" button is clicked, it checks if the input field (newToDoInput) is not empty. If not empty, it creates a new list item (<li>) containing the text entered by the user. It also creates a delete button (<button>) labeled "X" to remove the task.
Event Handling: Attaches an event listener to the delete button (deleteTodoBtn) to remove the corresponding task (newTodoItem) from the list when clicked.
Delete Task Functionality
javascript
Copy code
deleteTodoBtn.addEventListener("click", function () {
    newTodoItem.remove();
});
Functionality: Defines an event listener on each delete button (deleteTodoBtn) created for every task. When clicked, it removes the parent list item (newTodoItem) from the DOM (todoList).
Usage
This JavaScript file (script.js) is essential for the dynamic functionality of the To-Do List application. Ensure it is correctly linked to your HTML (index.html) file for proper interaction and task management.

Conclusion
This JavaScript documentation outlines the logic and functionality implemented to manage tasks dynamically in the To-Do List application. It enhances user interaction by allowing tasks to be added and removed seamlessly. Adjustments can be made based on specific requirements or additional features integrated into your project.

markdown
Copy code

### Instructions for GitHub:

1. Copy the Markdown content above into a new file named `README.md` in the root directory of your GitHub repository where your project files (`index.html`, `styles.css`, `script.js`) are located.
   
2. Save the `README.md` file.

3. Commit and push the changes to your GitHub repository.

This Markdown file will provide clear documentation for users and contributors visit

